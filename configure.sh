#!/bin/bash

OUTPUT=.config.mk
SUPPORTED_TARGETS="x86_64 aarch64"
SUPPORTED_OPT_LEVELS="0 1 2 3"
BU_INFIXES="Darwin:-elf- Linux:-linux-gnu-"

print_help() {
	echo Usage: configure.sh [options]
	echo Options:
	echo "	-h | --help (print this message)"
	echo "	-t <TARGET> (supported: $SUPPORTED_TARGETS)"
	echo "	-o <OPT_LEVEL> (supported: $SUPPORTED_OPT_LEVELS)"
	echo "	-p <BU_PREFIX>"
	exit $1
}

contains() {
	for word in $1;	do
		[[ $word = $2 ]] && return 0
	done
	return 1
}

aarr_index() {
	for pair in $1; do
		[ "${pair%%:*}" = $2 ] && echo "${pair##*:}" && return
	done
}

add_var() {
	echo "$1 is set to '$2'"
	echo "$1 := $2" >> $OUTPUT
}

find_prog() {
	if ! hash $1 2> /dev/null; then
		echo "failed to find program '$1'"
		exit 1
	fi
}

target=$(uname -m)
opt_level=3

for ((i = 1; i <= $#; i++)); do
	if [[ ${!i} = "-h" || ${!i} = "--help" ]]; then print_help 0; fi
	if [ ${!i} = "-t" ]; then target=${@:i+1:1}; ((i++)); continue; fi
	if [ ${!i} = "-o" ]; then opt_level=${@:i+1:1}; ((i++)); continue; fi
	if [ ${!i} = "-p" ]; then bu_prefix=${@:i+1:1}; ((i++)); continue; fi
	print_help 1
done

if ! contains "$SUPPORTED_TARGETS" "$target"; then
	echo "unsupported target (supported: $SUPPORTED_TARGETS)"
	exit 1
fi
if ! contains "$SUPPORTED_OPT_LEVELS" "$opt_level"; then
	echo "invalid optimization level (supported: $SUPPORTED_OPT_LEVELS)"
	exit 1
fi
if [ -z "$bu_prefix" ]; then
	bu_prefix=$target$(aarr_index "$BU_INFIXES" `uname`)
fi

rustc=rustc
objcopy="$bu_prefix"objcopy

find_prog $rustc
find_prog $objcopy

echo "# generated by configure.sh, do not modify" > $OUTPUT

add_var TARGET $target
add_var OPT_LEVEL $opt_level
add_var RUSTC $rustc
add_var OBJCOPY $objcopy
